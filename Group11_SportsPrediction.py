# -*- coding: utf-8 -*-
"""Midsem_Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12UxP9TEvhWTXYKQ-L9lySPunTDsRznMt
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import StackingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/players_21.csv')
data_test = pd.read_csv('/content/drive/MyDrive/players_22.csv')

pd.set_option('display.max_rows', None)
df.head()



df.info()

df.drop( ['club_loaned_from',"player_url","short_name","long_name","sofifa_id","player_face_url","club_logo_url","club_flag_url","nation_logo_url","nation_flag_url",
               'ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram',
               'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm',
               'rwb', 'lb','lcb', 'cb', 'rcb', 'rb', 'gk',"real_face"], axis = 1, inplace= True)

data_test.drop( ['club_loaned_from',"player_url","short_name","long_name","sofifa_id","player_face_url","club_logo_url","club_flag_url","nation_logo_url","nation_flag_url",
               'ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram',
               'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm',
               'rwb', 'lb','lcb', 'cb', 'rcb', 'rb', 'gk',"real_face"], axis = 1, inplace= True)

pd.set_option('display.expand_frame_repr', False)

# Set Pandas options to display all columns
pd.set_option('display.max_rows', None)
df.columns

df

# Select numeric columns
numeric_columns = df.select_dtypes(include=['number'])
numeric_columns2022 = data_test.select_dtypes(include=['number'])

# Select string object columns
string_columns = df.select_dtypes(include=['object'])
string_columns2022 = data_test.select_dtypes(include=['object'])

imp= SimpleImputer (strategy='mean')

imp.fit(numeric_columns)

imp_data = imp.transform(numeric_columns)
numeric_columns  = pd.DataFrame(imp_data, columns=numeric_columns.columns)


imp_data2 = imp.transform(numeric_columns2022)
numeric_columns2022  = pd.DataFrame(imp_data2, columns=numeric_columns2022.columns)

y = numeric_columns['overall']
numeric_columns.drop('overall', axis = 1, inplace= True)

y_test = numeric_columns2022['overall']
numeric_columns2022.drop('overall', axis = 1, inplace= True)

numeric_columns

sc = StandardScaler()
scaled_2021 = sc.fit_transform(numeric_columns)
numeric_columns = pd.DataFrame(scaled_2021 ,columns =  numeric_columns.columns)


scaled_2022 = sc.transform(numeric_columns2022)
numeric_columns2022 = pd.DataFrame(scaled_2022 ,columns =  numeric_columns2022.columns)

imp = SimpleImputer(strategy = "most_frequent")

string_fit = imp.fit_transform(string_columns)
string_columns = pd.DataFrame(string_fit, columns = string_columns.columns)

string_fit2022 = imp.transform(string_columns2022)
string_columns2022 = pd.DataFrame(string_fit2022, columns = string_columns2022.columns)

numeric_columns.isna().sum()

le = LabelEncoder()

columns_to_encode = string_columns.columns

# Initialize LabelEncoder
le = LabelEncoder()

# Label encode selected columns
for i in columns_to_encode:
    string_columns[i] = le.fit_transform(string_columns[i])
    string_columns2022[i] = le.fit_transform(string_columns2022[i])

numeric_columns.info()

string_columns.info()

relevant_features = pd.concat([numeric_columns,y, string_columns], axis =1)
relevant_features2022 = pd.concat([numeric_columns2022,y_test, string_columns2022], axis =1)

relevant_features.isna().sum()

target_variable = 'overall'

type(relevant_features)

relevant =[]
correlation_matrix = relevant_features.corr()

for (i,x) in correlation_matrix[target_variable].items():
  print(i)
  if x>0.4:
    relevant.append(i)

relevant

x = relevant_features[relevant]
y = x['overall']
x.drop('overall', axis = 1, inplace= True)

x_test2022 = relevant_features[relevant]
y_test2022 = x_test2022['overall']
x_test2022.drop('overall', axis = 1, inplace= True)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

x_train.isna().sum()

"""Random Forest"""

model = RandomForestRegressor(max_depth = 15, n_estimators=1000, random_state=42, min_samples_split=6)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)

"""GXboost"""

gx = XGBRegressor(n_estimators=1000, learning_rate=0.01)
gx.fit(x_train, y_train)

y_pred = gx.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)

"""Gradient booster"""

gb = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.01)
gb.fit(x_train, y_train)

y_pred = gb.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)

model.fit(x,y)

"""2022 data"""

import pickle

# Save to file
with open("scaler.pkl", "wb") as content:
    pickle.dump(sc, content)

from sklearn.model_selection import KFold,GridSearchCV

"""cv gb"""

cv=KFold(n_splits=3)
PARAMETERS = {
    "max_depth": [2, 5, 6, 12],
    "learning_rate": [0.3, 0.1, 0.03],
    "n_estimators": [100, 500, 1000],
}

gb = GradientBoostingRegressor()
model_gb = GridSearchCV(gb,param_grid=PARAMETERS,cv=cv,scoring="neg_root_mean_squared_error")
model_gb.fit(x_train,y_train)

y_pred = model_gb.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)

model_gb.best_estimator_

"""cv gxb"""

cv=KFold(n_splits=3)
PARAMETERS = {
    "max_depth": [2, 5, 6, 12],
    "learning_rate": [0.3, 0.1, 0.03],
    "n_estimators": [100, 500, 1000]
}

gx = XGBRegressor(n_estimators=1000, learning_rate=0.01)
model_gx = GridSearchCV(gx,param_grid=PARAMETERS,cv=cv,scoring="neg_root_mean_squared_error")
model_gx.fit(x_train,x_train)

y_pred = model_gx.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)

"""cv rfr"""

cv=KFold(n_splits=3)
PARAMETERS = {
    "max_depth": [2, 5, 6, 12],
    "learning_rate": [0.3, 0.1, 0.03],
    "n_estimators": [100, 500, 1000]
}

rfr = RandomForestRegressor()
model_rfr = GridSearchCV(rfr,param_grid=PARAMETERS,cv=cv,scoring="neg_root_mean_squared_error")
model_rfr.fit(x_train,y_train)

y_pred = model_rfr.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)



"""traning on 2022 data"""

final_model = GradientBoostingRegressor(learning_rate=0.03, max_depth=6, n_estimators=1000)

final_model.fit(x_train,y_train)

y_pred = final_model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)

"""2022"""

y_pred = final_model.predict(x_test2022)
mse = mean_squared_error(y_test2022, y_pred)
rsme = np.sqrt(mse)
print('RSME: ', rsme)



model_data = {
    "model" : final_model
}
import pickle

# Save to file
with open("model.pkl", "wb") as content:
    pickle.dump(model_data, content)